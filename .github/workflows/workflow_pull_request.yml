name: "[Workflow] Pull Request"

on:
  pull_request:

permissions:
  contents: read
  id-token: write
  security-events: write
  pull-requests: write

defaults:
  run:
    shell: bash

jobs:
  terraform:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [DEVL, NLE, LIVE, NLEEXTERNAL, PRODEXTERNAL]

    environment: ${{ matrix.environment }}

    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      Env: ${{ matrix.environment }}

    steps:
    
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Azure Login via OIDC
      uses: azure/login@v2
      with:
        subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        tenant-id: ${{ secrets.ARM_TENANT_ID }}
        client-id: ${{ secrets.ARM_CLIENT_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      id: init
      shell: pwsh
      run: scripts/pipeline/Run-TerraformAllCustomers.ps1 -Env "${{matrix.environment }}" -TerraformCommand "init -backend-config='./state.config'"

    - name: Terraform Format
      id: fmt
      shell: pwsh
      run: scripts/pipeline/Run-TerraformAllCustomers.ps1 -Env "${{matrix.environment }}" -TerraformCommand "fmt"

    - name: Terraform Validate
      id: validate
      shell: pwsh
      run: scripts/pipeline/Run-TerraformAllCustomers.ps1 -Env "${{matrix.environment }}" -TerraformCommand "validate"

    - name: Terraform Plan
      id: plan
      shell: pwsh
      run: scripts/pipeline/Run-TerraformAllCustomers.ps1 -Env "${{matrix.environment }}" -TerraformCommand "plan -no-color 2>&1 | tee ./plan_output.txt -lock-timeout=300s -input=false"
      continue-on-error: false

    - name: Comment Terraform Plan on PR
      uses: blinqas/tf-plan-pr-comment@v1
      with:
        output_file: ./plan_output.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # - name: Update Pull Request
    #   uses: actions/github-script@v7
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
    #       #### Terraform Initialization: \`${{ steps.init.outcome }}\`
    #       #### Terraform Validation: \`${{ steps.validate.outcome }}\`
    #       #### Terraform Plan: \`${{ steps.plan.outcome }}\`
    #       <details><summary>Show Plan</summary>
 
    #       \`\`\`\n
    #       ${{ steps.plan.outputs.stdout }}
    #       \`\`\`
 
    #       </details>
 
    #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
 
    #       github.rest.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: output
    #       })

    # - name: Terraform Plan Status
    #   if: steps.plan.outcome == 'failure'
    #   run: exit 1
