name: 'Rotate Entra ID Application Registration secret'
description: 'Rotate Entra ID Application Registration secret. Requires Federated credentials against the repository to be configured.'
branding:
  icon: rotate-cw
  color: white
inputs:
  client-id:
    description: 'The client/application id to rotate'
    required: true
  secret-validity-in-days:
    description: 'New secret validity in days'
    required: true
    default: '90'
outputs:
  secret-value:
    description: "The newly generated secret value"
    value: ${{ steps.rotate-secret.outputs.secret_value }}
  secret-id:
    description: "The ID of the secret"
    value: ${{ steps.rotate-secret.outputs.secret_id }}
runs:
  using: "composite"
  steps:
    - id: rotate-secret
      shell: bash
      run: |
        client_id=${{ inputs.client-id }}
        secret_validity_in_days=${{ inputs.secret-validity-in-days }}
        current_date=$(date -u +"%Y-%m-%dT%H:%M:%S")
        client_secret_end_date=$(date -d "+$secret_validity_in_days days" -u +"%Y-%m-%dT%H:%M:%S")
        client_secret_name=ghaction_rotate_$current_date

        # add new secret
        secret_value=$(az ad app credential reset --id $client_id --append --display-name $client_secret_name --end-date $client_secret_end_date --query password --only-show-errors --output tsv)
        echo "::add-mask::$secret_value"
        echo "secret_value=$secret_value" >> $GITHUB_OUTPUT

        # get secret id
        secret_id=$(az ad app credential list --id $client_id --query "[0].keyId" --output tsv)
        echo "secret_id=$secret_id" >> $GITHUB_OUTPUT

        # delete expired secrets
        for keyId in $(az ad app credential list --id $client_id --query "[].keyId" -o tsv); do
          endDateTime=$(az ad app credential list --id $client_id --query "[?keyId=='$keyId'].endDateTime" -o tsv)
          if [[ $(date -d "$endDateTime") < $(date -u +%s) ]]; then
            az ad app credential delete --id $client_id --key-id $keyId
          fi
        done
